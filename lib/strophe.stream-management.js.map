{"version":3,"file":"strophe.stream-management.js","sources":["../src/strophe.stream-management.js"],"sourcesContent":["import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: true,\n\n\t/**\n\t* @property {Boolean} returnWholeStanza: Set to true to return the acknowledged stanzas, otherwise only return its ID.\n\t*/\n\treturnWholeStanza: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function (listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function() {\n\t\tthis._c.send($build('enable', {xmlns: this._NS, resume: false}));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tconsole.info('INIT CONN MANAGEMENT', conn);\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tif (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED) {\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'enabled') && elem.getAttribute('xmlns') === this._NS) {\n\t\t\tthis._isStreamManagementEnabled = true;\n\t\t\tthis._c.resume();\n\t\t}\n\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\tif (Strophe.isTagEqual(elem, 'a')) {\n\t\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\t\t\tthis._serverProcesssedStanzasCounter = handledCount;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tconsole.warn('Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._unacknowledgedStanzas.push(this.returnWholeStanza ? elem : elem.getAttribute('id'));\n\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tconsole.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n\nconsole.info('REGISTERED STREAM MANAGEMENT PLUGIN');\n"],"names":["Strophe","$build"],"mappings":"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"}